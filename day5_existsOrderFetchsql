
 CREATE TABLE mart_satislar
    (
        urun_id        number(10),
        musteri_isim   varchar2(50),
        urun_isim      varchar2(50)
    );
    
    
    CREATE TABLE nisan_satislar
    (
        urun_id number(10),
        musteri_isim varchar2(50),
        urun_isim varchar2(50)
    );
    
    
    INSERT INTO mart_satislar VALUES (10, 'Mark', 'Honda');
    INSERT INTO mart_satislar VALUES (10, 'Mark', 'Honda');
    INSERT INTO mart_satislar VALUES (20, 'John', 'Toyota');
    INSERT INTO mart_satislar VALUES (30, 'Amy', 'Ford');
    INSERT INTO mart_satislar VALUES (20, 'Mark', 'Toyota');
    INSERT INTO mart_satislar VALUES (10, 'Adem', 'Honda');
    INSERT INTO mart_satislar VALUES (40, 'John', 'Hyundai');
    INSERT INTO mart_satislar VALUES (20, 'Eddie', 'Toyota');
    INSERT INTO nisan_satislar VALUES (10, 'Hasan', 'Honda');
    INSERT INTO nisan_satislar VALUES (10, 'Kemal', 'Honda');
    INSERT INTO nisan_satislar VALUES (20, 'Ayse', 'Toyota');
    INSERT INTO nisan_satislar VALUES (50, 'Yasar', 'Volvo');
    INSERT INTO nisan_satislar VALUES (20, 'Mine', 'Toyota');
    
    SELECT *  FROM  mart_satislar;
    SELECT * FROM  nisan_satislar;

-------------------------------------------------------------------------------
 --ORNEK1: 
 --MART VE NÝSAN aylarýnda ayný URUN_ID ile satýlan ürünlerin
 -- URUN_ID’lerini listeleyen ve ayný zamanda bu ürünleri MART ayýnda alan
 -- MUSTERI_ISIM 'lerini listeleyen bir sorgu yazýnýz.
 
 select urun_id, musteri_isim from mart_satislar
 
 WHERE EXISTS (SELECT urun_id from nisan_satislar 
 where mart_satislar.urun_id=nisan_satislar.urun_id);
 
--------------------------------------------------------------------------------
 
 --ORNEK2:
--Yukardaki tabloda Her iki ayda da satýlan ürünlerin URUN_ISIM'lerini ve bu 
--ürünleri NÝSAN ayýnda satýn alan MUSTERI_ISIM'lerini listeleyen bir sorgu yazýnýz.

SELECT urun_isim,musteri_isim FROM nisan_satislar
Where EXISTS (SELECT urun_isim from mart_satislar
                     Where urun_isim=urun_isim);


--------------------------------------------------------------------------------
--ORNEK3:
-- Her iki ayda da ortak olarak satýlmayan ürünlerin URUN_ISIM'lerini
--ve bu ürünleri NÝSAN ayýnda satýn alan MUSTERI_ISIM'lerini listeleyiniz.
-- (ana sorgu nisan ayi) 
SELECT urun_isim, musteri_isim FROM nisan_satislar n

WHERE  EXISTS (SELECT urun_isim FROM mart_satislar m

                                WHERE m.urun_isim=n.urun_isim);
 
-------------------------------------------------------------------------------- 



--===========IS NULL, IS NOT NULL, COALESCE(kulesk=birleþmek) ==================
   /* 1) IS NULL, ve IS NOT NULL boolean operatörleridir. Bir ifadenin NULL olup
    olmadýðýný kontrol ederler.
    
    
    *2)  COALESCE (birleþmek) ise bir fonksiyondur ve içerisindeki 
    parameterelerden
    NULL olmayan  ilk ifadeyi döndürür. Eðer aldýðý tüm ifadeler NULL ise NULL
    döndürürür.
    
    
   *3) SELECT COALESCE (sütun1,sütun2,...) from tabloAdý;
    Birden fazla null koþuluna göre deðer atamak istiyorsak COALESCE deyimini 
    kullanabiliriz.  COALESCE aslýnda case mantýðýnda çalýþýr ve birden fazla 
    kolon arasýnda kontrol saðlayabilirsiniz. Bir koþul gerçekleþmez ise 
    diðerine bakar, oda gerçekleþmez ise bir sonraki.
    Deyim bitene kadar
    
    
   -- CASE
   WHEN (expression1 IS NOT NULL) THEN expression1
   WHEN (expression2 IS NOT NULL) THEN expression2
   ...
   ELSE expressionN
   END  --gibi
   
   */
    
--==============================================================================*/
    
   
    drop table insanlar;
    
    CREATE TABLE insanlar
    (
        ssn CHAR(9),
        isim VARCHAR2(50),
        adres VARCHAR2(50)
    );
    
    
    INSERT INTO insanlar VALUES('123456789', 'Ali Can', 'Istanbul');
    INSERT INTO insanlar VALUES('234567890', 'Veli Cem', 'Ankara');
    INSERT INTO insanlar VALUES('345678901', 'Mine Bulut', 'Izmir');
    INSERT INTO insanlar (ssn, adres) VALUES('456789012', 'Bursa');
    INSERT INTO insanlar (ssn, adres) VALUES('567890123', 'Denizli');
    INSERT INTO insanlar (adres) VALUES('Sakarya');
    INSERT INTO insanlar (ssn) VALUES('999111222');
    
    SELECT *FROM insanlar;
    
------------------------------ORNEKLER------------------------------------------    

--ORNEK1: Ismi NULL olanlari sorgulayiniz

SELECT * FROM insanlar 
WHERE isim IS NULL;

--------------------------------------------------------------------------------

--ORNEK2: ismi Null olmaynalri sorgulayiniz
 
SELECT * FROM insanlar
Where isim IS NOT NULL;
--------------------------------------------------------------------------------

--ORNEK3: isim i Null olan kisilerin isimlerine NO NAME yazisi atayiniz

UPDATE insanlar 
SET isim='NO NAME'
WHERE isim IS NULL; 

SELECT  COALESCE (isim,ssn,adres) from insanlar;
--(gitmek istedigi dairenin ziline basiyor.. evde yoksa sirayla zillere basiyor..
--ilk kapiyi acana misafifir oluyor)  
--------------------------------------------------------------------------------

--ORNEK4: Tablodaki null verileri guzel bir cumlecikle degistirin.

UPDATE insanlar 
SET isim=COALESCE ( isim, 'henuz isim girilmedi')
    adres=COALESCE   (adres, 'henuz adres girilmedi')
    ssn COALESCE  (ssn, 'NO SSN');
    
    SELECT * FROM insanlar; 
    
    
/*================================ ORDER BY  ===================================
   ORDER BY cümleciði bir SORGU deyimi içerisinde belli bir SUTUN’a göre
   SIRALAMA yapmak için kullanýlýr.
   
   
   Syntax
   -------
      ORDER BY sutun_adi ASC   -- ARTAN
      ORDER BY sutun_adi DESC  -- AZALAN
    
 ===============================================================================
 */

CREATE TABLE kisiler
    (
        ssn CHAR(9) PRIMARY KEY,
        isim VARCHAR2(50),
        soyisim VARCHAR2(50),
        maas NUMBER,
        adres VARCHAR2(50)
    );
    
    INSERT INTO kisiler VALUES(123456789, 'Ali','Can', 3000,'Istanbul');
    INSERT INTO kisiler VALUES(234567890, 'Veli','Cem', 2890,'Ankara');
    INSERT INTO kisiler VALUES(345678901, 'Mine','Bulut',4200,'Ankara');
    INSERT INTO kisiler VALUES(256789012, 'Mahmut','Bulut',3150,'Istanbul');
    INSERT INTO kisiler VALUES (344678901, 'Mine','Yasa', 5000,'Ankara');
    INSERT INTO kisiler VALUES (345458901, 'Veli','Yilmaz',7000,'Istanbul');
    
    
    SELECT * FROM kisiler;
    
    
    
----------------------------ORNEKLER--------------------------------------------

--ORNEK1: kisiler tablosunu adres'e göre sýralayarak sorgulayýnýz.

SELECT * FROM kisiler
ORDER BY adres;


---------------------------------------------------------------------------------

--ORNEK2: Ismi mine olanlari, SSN e gore AZALAN (DESC) sirada sorgulayiniz. 

SELECT * FROM kisiler
ORDER BY maas DESC;

--------------------------------------------------------------------------------
--ORNEK3: ismi Mine olanlarý, SSN'e göre AZALAN(DESC) sýrada sorgulayýnýz.

SELECT * FROM kisiler
WHERE isim= 'Mine'
ORDER BY ssn DESC; 

--------------------------------------------------------------------------------
--ORNEK4:  soyismi 'i Bulut olanlarý isim sýralý olarak sorgulayýnýz.
SELECT * FROM kisiler 
WHERE soyisim='Bulut'
ORDER BY 2; 
--isim yerine isim sutun sirasi olan 2 yi kullanabiliriz.
    
-------------------------------------------------------------------------------    
    
/*--------------------FETCH NEXT, OFFSET----------------------------------------- 
      (12C VE ÜSTÜ oracle larda çalýþýr, daha altsanýz çalýþmaz) 
   FETCH cümleciði ile listelenecek kayýtlarý sýnýrlandýrabiliriz. Ýstersek
   satýr sayýsýna göre istersek de toplam satýr sayýsýnýn belli bir yüzdesine
   göre sýnýrlandýrma koymak mümkündür. (þu kadar satýrý getir)
   
   
   Syntax
   ---------
   FETCH NEXT satir_sayisi ROWS ONLY;
   FETCH NEXT satir_yuzdesi PERCENT ROWS ONLY;
   OFFSET Cümleciði ile de listenecek olan satýrlardan sýrasýyla istediðimiz
   kadarýný atlayabiliriz.
   Syntax
   ----------
   OFFSET satýr_sayisi ROWS;
==============================================================================
*/

-----------------------------ORNEKLER-------------------------------------------

-- ORNEK1: 
--MAAÞ'ý en yüksek 3 kiþinin bilgilerini listeleyen sorguyu yazýnýz. 
  
  --AHMET 
  SELECT * FROM Kisiler
  ORDER BY maas DESC
  FETCH NEXT 3 ROWS ONLY;
  
--MEHMET
  SELECT * FROM (SELECT * FROM kisiler 
  ORDER BY maas DESC)
  WHERE ROWNUM< 4;
  
  
--ALI
   SELECT * FROM Kisiler (SELECT * FROM kisiler 
   ORDER BY maas )
   WHERE ROWNUM < 3;
  
  
  
-------------------------------------------------------------------------------  
--ORNEK2: MAAÞ'a göre sýralamada 4. 5. ve 6. kiþilerin bilgilerini listeleyen
  sorguyu yazýnýz.
  
  
    select * from kisiler
    order by maas; 
    OFFSET3 ROWS 
    FETCH NEXT 3ROWS ONLY;
--------------------------------------------------------------------------------    
    
    
    
    
    




